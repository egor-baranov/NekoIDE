import javax.swing.*;
import java.awt.*;
import java.util.Stack;

public class IDE extends JFrame {
    private JPanel rootPanel;
    public JTextPane textEditor;
    private JToolBar toolBar;
    private JPanel toolBarPanel;
    private Boolean shouldSave = true;
    private Stack<String> prevStateStack, nextStateStack;

    IDE() {
        this.setTitle("Neko IDE");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.prevStateStack = new Stack<>();
        this.nextStateStack = new Stack<>();
        prevStateStack.push("");
        // добавление menu
        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("File"), editMenu = new JMenu("Edit"), helpMenu = new JMenu("Help");
        fileMenu.add(new JMenuItem("New"));
        fileMenu.add(new JMenuItem("Open"));
        fileMenu.add(new JMenuItem("Settings"));
        fileMenu.add(new JMenuItem("Exit"));
        menuBar.add(fileMenu);
        editMenu.add(new JMenuItem("Find"));
        menuBar.add(editMenu);
        helpMenu.add(new JMenuItem("About"));
        menuBar.add(helpMenu);
        setJMenuBar(menuBar);

        // добавление toolBar
        setContentPane(rootPanel);
        setSize(600, 400);
        setVisible(true);
    }

    void saveState() {
        if (!shouldSave) return;
        prevStateStack.push(textEditor.getText());
        nextStateStack.clear();
    }

    void prevState() {
        if (prevStateStack.size() <= 1) return;
        shouldSave = false;
        nextStateStack.push(prevStateStack.pop());
        textEditor.setText(prevStateStack.peek());
        shouldSave = true;
    }

    void nextState() {
        if (nextStateStack.isEmpty()) return;
        shouldSave = false;
        prevStateStack.push(nextStateStack.pop());
        textEditor.setText(prevStateStack.peek());
        shouldSave = true;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.setEnabled(true);
        textEditor = new JTextPane();
        rootPanel.add(textEditor, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        toolBar = new JToolBar();
        toolBar.setFloatable(false);
        rootPanel.add(toolBar, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        toolBarPanel = new JPanel();
        toolBarPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        toolBarPanel.setInheritsPopupMenu(false);
        toolBarPanel.setPreferredSize(new Dimension(24, -1));
        toolBar.add(toolBarPanel);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
