import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import java.util.HashSet;


public class IDE extends JFrame implements KeyListener, ContainerListener {
    private JPanel rootPanel;
    private JToolBar toolBar;
    private JPanel toolBarPanel;
    DnDTabbedPane tabbedPane;
    private HashSet<File> openedTabs = new HashSet<>();

    IDE() {
        this.setTitle("Neko IDE");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        // добавление menu
        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("File"),
                editMenu = new JMenu("Edit"),
                helpMenu = new JMenu("Help");
        JMenuItem newItem = new JMenuItem("New"),
                openItem = new JMenuItem("Open"),
                settingsItem = new JMenuItem("Settings"),
                exitItem = new JMenuItem("Exit");

        newItem.addActionListener(actionEvent -> {
            showNewFileDialog();
        });

        openItem.addActionListener(actionEvent -> {
            showOpenFileDialog();
        });

        settingsItem.addActionListener(actionEvent -> {
            showSettingsDialog();
        });

        exitItem.addActionListener(actionEvent -> dispose());

        fileMenu.add(newItem);
        fileMenu.add(openItem);
        fileMenu.add(settingsItem);
        fileMenu.add(exitItem);
        menuBar.add(fileMenu);
        editMenu.add(new JMenuItem("Find"));
        menuBar.add(editMenu);
        helpMenu.add(new JMenuItem("About"));
        menuBar.add(helpMenu);
        setJMenuBar(menuBar);

        // добавление toolBar
        setContentPane(rootPanel);
        setSize(600, 400);
        setLocation(
                (Toolkit.getDefaultToolkit().getScreenSize().width) / 2 - getWidth() / 2,
                (Toolkit.getDefaultToolkit().getScreenSize().height) / 2 - getHeight() / 2);
        setVisible(true);
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        tabbedPane.addContainerListener(this);
    }

    void showNewFileDialog() {
        JDialog dialogFrame = new NewFileDialog();
        JButton nSourceFile = new JButton("New Neko Source File (.nk, .neko)");
        dialogFrame.add(nSourceFile);
        dialogFrame.add(new JButton("New Project"));
        dialogFrame.setResizable(false);
        dialogFrame.setVisible(true);
    }

    void showOpenFileDialog() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter =
                new FileNameExtensionFilter("Neko source files", "neko", "nk");
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            System.out.println(file.getName());
            if (!openedTabs.contains(file)) {
                String text = "";
                try (BufferedReader buffReader = new BufferedReader(new FileReader(file.getPath()))) {
                    StringBuilder stringBuilder = new StringBuilder();
                    String line = buffReader.readLine();

                    while (line != null) {
                        stringBuilder.append(line);
                        stringBuilder.append(System.lineSeparator());
                        line = buffReader.readLine();
                    }
                    text = stringBuilder.toString();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                CodeEditor codeEditor = new CodeEditor(file.getPath(), this, text);
                JScrollPane scrollPane = new JScrollPane(codeEditor);
                tabbedPane.addTab(file.getName(), scrollPane);
                openedTabs.add(file);
            }
        }
    }

    void showSettingsDialog() {
        JDialog dialogFrame = new JDialog();
        dialogFrame.setModal(true);
        dialogFrame.setTitle("Settings");
        dialogFrame.setSize(300, 300);
        dialogFrame.setLocation(
                (Toolkit.getDefaultToolkit().getScreenSize().width) / 2 - dialogFrame.getWidth() / 2,
                (Toolkit.getDefaultToolkit().getScreenSize().height) / 2 - dialogFrame.getHeight() / 2);
        dialogFrame.setResizable(false);
        dialogFrame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.setEnabled(true);
        toolBar = new JToolBar();
        toolBar.setFloatable(false);
        rootPanel.add(toolBar, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 20), null, 0, false));
        toolBarPanel = new JPanel();
        toolBarPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        toolBarPanel.setInheritsPopupMenu(false);
        toolBarPanel.setPreferredSize(new Dimension(24, -1));
        toolBar.add(toolBarPanel);
        tabbedPane = new DnDTabbedPane();
        toolBarPanel.add(tabbedPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    @Override
    public void keyTyped(KeyEvent keyEvent) {

    }

    @Override
    public void keyPressed(KeyEvent event) {
        // сочетания клавиш
        if (event.isControlDown()) {
            // создание нового файла
            if (event.getKeyCode() == KeyEvent.VK_N) {
                showNewFileDialog();
            }
            // закрытие файла
            if (event.getKeyCode() == KeyEvent.VK_W) {
                tabbedPane.remove(tabbedPane.getSelectedComponent());
            }
            // открытие файла
            if (event.getKeyCode() == KeyEvent.VK_O) {
                showOpenFileDialog();
            }
            // открытие меню настроек
            if (event.getKeyCode() == KeyEvent.VK_S) {
                showSettingsDialog();
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent keyEvent) {

    }

    @Override
    public void componentAdded(ContainerEvent containerEvent) {
        System.out.println("Component Added");
    }

    @Override
    public void componentRemoved(ContainerEvent containerEvent) {
        System.out.println("Component Removed");
        openedTabs.clear();
        for (int i = 0; i < tabbedPane.getTabCount(); ++i) {
            JScrollPane scrollPane = (JScrollPane) tabbedPane.getComponentAt(i);
            openedTabs.add(((CodeEditor) scrollPane.getViewport().getView()).getPath());
        }
    }
}
